{"_id": "_design/couchnotes", "_attachments": {"utils.js": {"data": "", "content_type": "application/javascript"}, "index.html": {"data": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkNvdWNoTm90ZXM8L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzdHlsZS9tYWluLmNzcyIgdHlwZT0idGV4dC9jc3MiPgogIDwvaGVhZD4KCiAgPGJvZHk+CgogICAgPGRpdiBpZD0iY29udGVudCI+PC9kaXY+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2h0bWwiIGlkPSJob21lX3RwbCI+CiAgICAgIDxoZWFkZXI+CiAgICAgICAgPGEgaWQ9InN5bmMiIGhyZWY9IiMhL3N5bmMvIiBjbGFzcz0ibGVmdCI+U3luYzwvYT4gICAgICAKICAgICAgICA8aDE+Q291Y2hOb3RlczwvaDE+CiAgICAgICAgPGEgaHJlZj0iIyEvbmV3L2VkaXQvIiBjbGFzcz0icmlnaHQgcGx1cyI+KzwvYT4KICAgICAgPC9oZWFkZXI+ICAgICAgCiAgICAgIAogICAgICA8dGFibGUgY2xhc3M9Im5vdGVzIiBjZWxsc3BhY2luZz0iMCI+CiAgICAgICAge3sjbm90ZXN9fQogICAgICAgIDx0cj4KICAgICAgICAgIDx0ZCBjbGFzcz0idGl0bGUiPjxhIGhyZWY9IiMhL3t7aWR9fS8iPnt7dGl0bGV9fTwvYT48L3RkPgogICAgICAgICAgPHRkIGNsYXNzPSJkYXRlIj48YSBocmVmPSIjIS97e2lkfX0vIj57e2RhdGV9fTwvYT48L3RkPgogICAgICAgICAgPHRkIGNsYXNzPSJhcnJvdyI+PGEgaHJlZj0iIyEve3tpZH19LyI+Jmd0OzwvYT48L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAge3svbm90ZXN9fQogICAgICA8L3RhYmxlPgogICAgICB7e15ub3Rlc319PGRpdiBjbGFzcz0ibm9uZSI+Tm8gTm90ZXMgOig8L2Rpdj57ey9ub3Rlc319CiAgICAgIAogICAgPC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2h0bWwiIGlkPSJzeW5jX3RwbCI+CiAgICAgIDxoZWFkZXI+CiAgICAgICAgPGEgY2xhc3M9ImxlZnQiIGhyZWY9IiMhIj5CYWNrPC9hPiAgICAgIAogICAgICAgIDxoMT5TeW5jPC9oMT4KICAgICAgPC9oZWFkZXI+CgogICAgICA8ZGl2IGlkPSJub3RlcyI+CgogICAgICAgIDxkaXYgaWQ9ImZlZWRiYWNrIj5ObyBDdXJyZW50IFRhc2tzPC9kaXY+CgogICAgICAgIDxmb3JtIGFjdGlvbj0iI3N5bmMiIGlkPSJzeW5jZm9ybSIgY2xhc3M9Im1haW5mb3JtIj4KICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgPGxhYmVsPlVzZXIgTmFtZQogICAgICAgICAgICAgIDxzcGFuPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSIgdmFsdWU9Int7dXNlcm5hbWV9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InVzZXJuYW1lIiBwbGFjZWhvbGRlcj0iam9obmRvZSIgLz48L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQKICAgICAgICAgICAgICA8c3Bhbj48aW5wdXQgdHlwZT0icGFzc3dvcmQiIHZhbHVlPSJ7e3Bhc3N3b3JkfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIC8+PC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgPGxhYmVsPlNlcnZlcgogICAgICAgICAgICAgIDxzcGFuPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJzZXJ2ZXIiIHZhbHVlPSJ7e3NlcnZlcn19IgogICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ic2VydmVyIiBwbGFjZWhvbGRlcj0iaHR0cDovL2V4YW1wbGUuY29tIiAvPjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgIDxsYWJlbD5EYXRhYmFzZQogICAgICAgICAgICAgIDxzcGFuPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJkYXRhYmFzZSIgdmFsdWU9Int7ZGF0YWJhc2V9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImRhdGFiYXNlIiBwbGFjZWhvbGRlcj0ibXl3b3JrIiAvPjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAKICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgaWQ9InN5bmNhY3Rpb24iIC8+CiAgICAgICAgICAKICAgICAgICAgIDxkaXYgaWQ9InN5bmNidG5zIj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ic3luY2J0biIgaWQ9InB1c2giPjxkaXY+UHVzaDwvZGl2PjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJzeW5jYnRuIiBpZD0icHVsbCI+PGRpdj5QdWxsPC9kaXY+PC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Zvcm0+CiAgICAgIDwvZGl2PgogICAgPC9zY3JpcHQ+CiAgICAKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9odG1sIiBpZD0iY3JlYXRlX3RwbCI+CgogICAgICA8aGVhZGVyPgoKICAgICAgICA8YSBpZD0iYmFjayIgY2xhc3M9ImxlZnQiPkJhY2s8L2E+ICAgICAgCgogICAgICAgIDxoMT57e3RpdGxlfX08L2gxPgoKICAgICAgICA8YSBjbGFzcz0icmlnaHQgaGlkZSIgaWQ9InNhdmUiPlNhdmU8L2E+ICAgICAgCiAgICAgICAgPGEgaHJlZj0ie3tlZGl0TGlua319IiBpZD0iZWRpdCIgY2xhc3M9InJpZ2h0IGhpZGUiPkVkaXQ8L2E+ICAgICAgCgogICAgICA8L2hlYWRlcj4KCiAgICAgIDxkaXYgaWQ9Im5vdGVzIj4KICAgICAgICA8dGV4dGFyZWEgaWQ9Im5vdGVzdGV4dCI+e3t7bm90ZXN9fX08L3RleHRhcmVhPgogICAgICA8L2Rpdj4KCiAgICAgIDxmb290ZXI+CiAgICAgICAgPGZvcm0gYWN0aW9uPSIjZGVsZXRlIj4gCiAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iIiAvPgogICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgaWQ9ImRlbGV0ZSIgdmFsdWU9IiIgLz4KICAgICAgICA8L2Zvcm0+CiAgICAgIDwvZm9vdGVyPgoKICAgIDwvc2NyaXB0PgoKICA8L2JvZHk+CgogIDxzY3JpcHQgc3JjPSIuLi8uLi8uLi9fdXRpbHMvc2NyaXB0L2pxdWVyeS5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9Ii4uLy4uLy4uL191dGlscy9zY3JpcHQvanF1ZXJ5LmNvdWNoLmpzIj48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iLi4vLi4vLi4vX3V0aWxzL3NjcmlwdC9zaGExLmpzIj48L3NjcmlwdD4KICAKICA8c2NyaXB0IHNyYz0iLi9tZDUuanMiPjwvc2NyaXB0PgogIDxzY3JpcHQgc3JjPSIuL211c3RhY2hlLmpzIj48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iLi91dGlscy5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9Ii4vbm90ZXMuanMiPjwvc2NyaXB0PgogIAo8L2h0bWw+Cg==", "content_type": "text/html"}, "style/mobile.css": {"data": "", "content_type": "text/css"}, "notes.js": {"data": "dmFyIE5vdGVzID0gKGZ1bmN0aW9uICgpIHsKCiAgdmFyIG1haW5EYiAgICAgPSBkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgiLyIpWzFdLAogICAgICBzdG9yYWdlS2V5ID0gInN5bmNEZXRhaWxzIiwKICAgICAgZGV0YWlscyAgICA9IGpzb25TdG9yYWdlKHN0b3JhZ2VLZXkpLAogICAgICByb3V0ZXIgICAgID0gbmV3IFJvdXRlcigpLAogICAgICAkZGIgICAgICAgID0gJC5jb3VjaC5kYihtYWluRGIpLAogICAgICBjdXJyZW50RG9jID0gbnVsbDsKCiAgcm91dGVyLmdldCgvXighKT8kLywgZnVuY3Rpb24gKCkgewogICAgJGRiLnZpZXcoJ2NvdWNobm90ZXMvbm90ZXMnLCB7CiAgICAgIGRlc2NlbmRpbmcgOiB0cnVlLAogICAgICBzdWNjZXNzIDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgaSwgcm93cyA9IFtdOwogICAgICAgIGZvciAoaT0wOyBpIDwgZGF0YS50b3RhbF9yb3dzOyBpKyspIHsKICAgICAgICAgIHJvd3MucHVzaCh7CiAgICAgICAgICAgIGlkIDogZGF0YS5yb3dzW2ldLmlkLAogICAgICAgICAgICB0aXRsZSA6IGRhdGEucm93c1tpXS5rZXlbMV0sCiAgICAgICAgICAgIGRhdGUgOiBmb3JtYXREYXRlKGRhdGEucm93c1tpXS5rZXlbMF0pCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmVuZGVyKCIjaG9tZV90cGwiLCB7bm90ZXM6cm93c30pOwogICAgICB9CiAgICB9KTsKICB9KTsKCiAgcm91dGVyLmdldCgnIS9zeW5jLycsIGZ1bmN0aW9uICgpIHsKICAgIHJlbmRlcigiI3N5bmNfdHBsIiwgZGV0YWlscyk7CiAgfSk7CgogIHJvdXRlci5nZXQoJyEvOmlkL2VkaXQvJywgZnVuY3Rpb24gKGlkKSB7CiAgICBzaG93Tm90ZShpZCwgdHJ1ZSk7CiAgfSk7CgogIHJvdXRlci5nZXQoJyEvOmlkLycsIGZ1bmN0aW9uIChpZCkgewogICAgc2hvd05vdGUoaWQsIGZhbHNlKTsKICB9KTsKCiAgcm91dGVyLnBvc3QoJ2RlbGV0ZScsIGZ1bmN0aW9uICgpIHsKICAgICRkYi5yZW1vdmVEb2MoY3VycmVudERvYywgewogICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9ICIjISI7CiAgICAgIH0KICAgIH0pOwogIH0pOwoKICBmdW5jdGlvbiBzYXZlRGV0YWlscygpIHsKICAgIGRldGFpbHMgPSB7CiAgICAgICJ1c2VybmFtZSIgOiAkKCIjdXNlcm5hbWUiKS52YWwoKSwKICAgICAgInBhc3N3b3JkIiA6ICQoIiNwYXNzd29yZCIpLnZhbCgpLAogICAgICAic2VydmVyIiAgIDogJCgiI3NlcnZlciIpLnZhbCgpLAogICAgICAiZGF0YWJhc2UiIDogJCgiI2RhdGFiYXNlIikudmFsKCkKICAgIH07CiAgICBqc29uU3RvcmFnZShzdG9yYWdlS2V5LCBkZXRhaWxzKTsKICB9OwoKICBmdW5jdGlvbiBzaG93Tm90ZShpZCwgZWRpdCkgewogICAgJGRiLm9wZW5Eb2MoaWQsIHsKICAgICAgZXJyb3IgOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGN1cnJlbnREb2MgPSBudWxsOwogICAgICAgIHJlbmRlck5vdGUoe3RpdGxlOiJOZXcgTm90ZSJ9LCBlZGl0KTsKICAgICAgfSwKICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgY3VycmVudERvYyA9IGRhdGE7CiAgICAgICAgZGF0YS5jcmVhdGVkID0gZm9ybWF0RGF0ZShkYXRhLmNyZWF0ZWQpOwogICAgICAgIGRhdGEuZWRpdExpbmsgPSAnIyEvJyArIGRhdGEuX2lkICsgJy9lZGl0Lyc7CiAgICAgICAgcmVuZGVyTm90ZShkYXRhLCBlZGl0KTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgZnVuY3Rpb24gcmVuZGVyTm90ZShkYXRhLCBlZGl0KSB7CiAgICByZW5kZXIoIiNjcmVhdGVfdHBsIiwgZGF0YSk7CiAgICBpZiAoZWRpdCkgewogICAgICAkKCIjbm90ZXMgdGV4dGFyZWEiKVswXS5mb2N1cygpOwogICAgfSBlbHNlIHsKICAgICAgc3RvcEVkaXRpbmcoKTsKICAgIH0KICB9OwoKICBmdW5jdGlvbiBzdGFydEVkaXRpbmcoKSB7CiAgICAkKCIjZWRpdCIpLmhpZGUoKTsKICAgICQoIiNzYXZlIikuc2hvdygpOwogIH07CgogIGZ1bmN0aW9uIHN0b3BFZGl0aW5nKCkgewogICAgJCgiI2VkaXQiKS5zaG93KCk7CiAgICAkKCIjc2F2ZSIpLmhpZGUoKTsKICB9OwoKICBmdW5jdGlvbiBzYXZlTm90ZShub3RlcywgY2FsbGJhY2spIHsKCiAgICB2YXIgdGl0bGUgPSBub3Rlcy5zcGxpdCgnXG4nKVswXTsKCiAgICBpZiAobm90ZXMgPT09ICIiIHx8IHRpdGxlID09PSAiIikgewogICAgICByZXR1cm4gY2FsbGJhY2soKTsKICAgIH0KCiAgICB2YXIgZG9jID0gewogICAgICBfaWQgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArICIiLAogICAgICB0aXRsZSA6IHRpdGxlLAogICAgICB0eXBlIDogJ25vdGUnLAogICAgICBub3RlcyA6IG5vdGVzLAogICAgICBjcmVhdGVkIDogbmV3IERhdGUoKS5nZXRUaW1lKCkKICAgIH07CgogICAgaWYgKGN1cnJlbnREb2MpIHsKICAgICAgZG9jLl9pZCA9IGN1cnJlbnREb2MuX2lkOwogICAgICBkb2MuX3JldiA9IGN1cnJlbnREb2MuX3JldjsKICAgIH0KCiAgICAkZGIuc2F2ZURvYyhkb2MsIHsKICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgaWYgKCFjdXJyZW50RG9jKSB7CiAgICAgICAgICBjdXJyZW50RG9jID0gZG9jOwogICAgICAgIH0KICAgICAgICBjdXJyZW50RG9jLl9yZXYgPSBkYXRhLnJldjsKICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICBjYWxsYmFjayhkb2MpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIHRpdGxlOwogIH07CgogIGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkgewogICAgcmV0dXJuIHByZXR0eURhdGUobmV3IERhdGUoZGF0ZSkpOwogIH07CgogIGZ1bmN0aW9uIHJlbmRlcih0cGwsIGRhdGEpIHsKICAgIGRhdGEgPSBkYXRhIHx8IHt9OwogICAgJCgnI2NvbnRlbnQnKS5odG1sKE11c3RhY2hlLnRvX2h0bWwoJCh0cGwpLmh0bWwoKSwgZGF0YSkpOwogIH07CgogIGZ1bmN0aW9uIGpzb25TdG9yYWdlKGtleSwgdmFsKSB7CiAgICBpZiAodmFsKSB7CiAgICAgIGxvY2FsU3RvcmFnZVtrZXldID0gSlNPTi5zdHJpbmdpZnkodmFsKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbG9jYWxTdG9yYWdlICYmIGxvY2FsU3RvcmFnZVtrZXldICYmCiAgICAgICAgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2Vba2V5XSkgfHwgZmFsc2U7CiAgICB9CiAgfTsKCiAgLy8gSSBkb250IGxpa2UgdGhlc2UgZ2xvYmFsIGV2ZW50cywgdGhleSBhcmUgYm91bmQgdG8gdGhlIHBhZ2UgcGVybWFuZW50bHkKICAvLyBzbyBtYXkgY2F1c2UgY29uZmxpY3RzCiAgZnVuY3Rpb24gYmluZERvbUV2ZW50cygpIHsKCiAgICAkKCIjbm90ZXMgdGV4dGFyZWEiKS5saXZlKCJmb2N1cyIsIHN0YXJ0RWRpdGluZyk7CgogICAgJCgiI2JhY2siKS5saXZlKCJtb3VzZWRvd24iLCBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIHVnaCwgbW9iaWxlIHdlYmtpdCB3aWxsIHBlcnNpc3QgdGhlIHRleHQgYXJlYSB1bmxlc3MgSSBkZXN0cm95IGl0CiAgICAgIC8vIGJlZm9yZSBhamF4IHJlcXVlc3QKICAgICAgdmFyIG5vdGVzID0gJCgiI25vdGVzIHRleHRhcmVhIikudmFsKCk7CiAgICAgICQoIiNub3RlcyB0ZXh0YXJlYSIpLnJlbW92ZSgpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBzYXZlTm90ZShub3RlcywgZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9ICcjISc7CiAgICAgICAgfSwgMCk7CiAgICAgIH0pOwogICAgfSk7CgogICAgJCgiI3NhdmUiKS5saXZlKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgc2F2ZU5vdGUoJCgiI25vdGVzIHRleHRhcmVhIikudmFsKCksIGZ1bmN0aW9uIChkb2MpIHsKICAgICAgICBpZiAoZG9jKSB7CiAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gJyMhLycgKyBkb2MuX2lkICsnLyc7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH07CgogIGZ1bmN0aW9uIGNyZWF0ZVVybEZyb21EZXRhaWxzKCkgewogICAgaWYgKGRldGFpbHMudXNlcm5hbWUgPT09ICIiKSB7CiAgICAgIHJldHVybiAiaHR0cDovLyIgKyBkZXRhaWxzLnNlcnZlciArICIvIiArIGRldGFpbHMuZGF0YWJhc2U7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gImh0dHA6Ly8iICsgZGV0YWlscy51c2VybmFtZSArICI6IiArIGRldGFpbHMucGFzc3dvcmQgKyAiQCIKICAgICAgICArIGRldGFpbHMuc2VydmVyICsgIi8iICsgZGV0YWlscy5kYXRhYmFzZTsKICAgIH0KICB9OwoKICBmdW5jdGlvbiBkb1JlcGxpY2F0aW9uKG9iaikgewogICAgJCgiI2ZlZWRiYWNrIikudGV4dCgiU3RhcnRpbmcgUmVwbGljYXRpb24iKTsKICAgICQuYWpheCh7CiAgICAgICJ1cmwiOiAiL19yZXBsaWNhdGUiLAogICAgICAidHlwZSI6ICdQT1NUJywKICAgICAgImRhdGEiOiBKU09OLnN0cmluZ2lmeShvYmopLAogICAgICBjb250ZW50VHlwZSA6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgZGF0YVR5cGUgOiAianNvbiIsCiAgICAgICJzdWNjZXNzIjogZnVuY3Rpb24gKCkgewogICAgICAgICQoIiNmZWVkYmFjayIpLnRleHQoIlJlcGxpY2F0aW9uIENvbXBsZXRlIik7CiAgICAgfQogICAgfSk7CiAgfTsKCiAgJCgiI3B1c2giKS5saXZlKCJjbGljayIsIGZ1bmN0aW9uIChvYmopIHsKICAgIHNhdmVEZXRhaWxzKCk7CiAgICBkb1JlcGxpY2F0aW9uKHsKICAgICAgInRhcmdldCIgOiBjcmVhdGVVcmxGcm9tRGV0YWlscygpLAogICAgICAic291cmNlIiA6IG1haW5EYgogICAgfSk7CiAgfSk7CgogICQoIiNwdWxsIikubGl2ZSgiY2xpY2siLCBmdW5jdGlvbiAoKSB7CiAgICBzYXZlRGV0YWlscygpOwogICAgZG9SZXBsaWNhdGlvbih7CiAgICAgICJ0YXJnZXQiIDogbWFpbkRiLAogICAgICAic291cmNlIiA6IGNyZWF0ZVVybEZyb21EZXRhaWxzKCkKICAgIH0pOwogIH0pOwoKICBiaW5kRG9tRXZlbnRzKCk7CiAgcm91dGVyLmluaXQoKTsKCn0pKCk7", "content_type": "application/javascript"}, "tick.png": {"data": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAhxJREFUeNpi/P//PwMlgImBQsACIhhnCAFZjEAGkANy0B8gwQ00m5kRogpEMYHl5YF4LZBXw/D3/47/Ea/xuOD7PwaGX1AMMvDvfwGGf/8nprkkGQPZLUAVHqR4gY3hH0Ofoby+6ZcvXxjinWL0Gf4wtMC9QAAwAjXXK0jIO8gLyUl9/Pzx98Fjh24AXdOA7gIPoP/PwJwGdvoPoNP/MGQIcwkGq4mrKHz5+uXf0UtH7wBdMRGodgvCgP9ATX/+tyT5JxqCaDAfIu7DwcSWJckjqfzgwQOGU5dP3f3w4cNSoJq5DL//I0Xjn38tMX4xes+ePWOK8IowAPGBmnNZ/jPVS4vLqH7985Xl5YcXDz99+rAJGIDtQAxxIcKA/zVLViy8xM7J9uvU7VPMDnaOOkAb4sVkxTV+sPxgf/fhzdOP797vZ/gLjD4GBojObT8gAQRKiYx9/AxADaAwaDF2NtN6+vMZpwCnAMP7b+8Zfrz49vrj3fdHGJgZkhhYmT4w7P4J1wzWCyY8OBgY5JiBmBFsiLSdvMYP3l/cv1/+/PD57Psz/5kYEhgO/H4K1owEEAYwQlOcAtAQc2YPBmnGFi4TfpnvFz7d+f/wXyrD8T/XGR79w4hfZANAYcELxAJAzMdgzGTJoMOQxnDmfyfD1f9XgGIgq39AaRD+xQDyNBDADAA5gR2IOaA0MzRX/IPiP1D8F4n+BzeAEgAQYAC7HATaTnWSLQAAAABJRU5ErkJggg==", "content_type": "image/png"}, "mustache.js": {"data": "", "content_type": "application/javascript"}, "delete.png": {"data": "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", "content_type": "image/png"}, "md5.js": {"data": "LyoKICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZQogKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLgogKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDkKICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldAogKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UKICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby4KICovCgovKgogKiBDb25maWd1cmFibGUgdmFyaWFibGVzLiBZb3UgbWF5IG5lZWQgdG8gdHdlYWsgdGhlc2UgdG8gYmUgY29tcGF0aWJsZSB3aXRoCiAqIHRoZSBzZXJ2ZXItc2lkZSwgYnV0IHRoZSBkZWZhdWx0cyB3b3JrIGluIG1vc3QgY2FzZXMuCiAqLwp2YXIgaGV4Y2FzZSA9IDA7ICAgLyogaGV4IG91dHB1dCBmb3JtYXQuIDAgLSBsb3dlcmNhc2U7IDEgLSB1cHBlcmNhc2UgICAgICAgICovCnZhciBiNjRwYWQgID0gIiI7ICAvKiBiYXNlLTY0IHBhZCBjaGFyYWN0ZXIuICI9IiBmb3Igc3RyaWN0IFJGQyBjb21wbGlhbmNlICAgKi8KCi8qCiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIHlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gY2FsbAogKiBUaGV5IHRha2Ugc3RyaW5nIGFyZ3VtZW50cyBhbmQgcmV0dXJuIGVpdGhlciBoZXggb3IgYmFzZS02NCBlbmNvZGVkIHN0cmluZ3MKICovCmZ1bmN0aW9uIGhleF9tZDUocykgICAgeyByZXR1cm4gcnN0cjJoZXgocnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSkpOyB9CmZ1bmN0aW9uIGI2NF9tZDUocykgICAgeyByZXR1cm4gcnN0cjJiNjQocnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSkpOyB9CmZ1bmN0aW9uIGFueV9tZDUocywgZSkgeyByZXR1cm4gcnN0cjJhbnkocnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSksIGUpOyB9CmZ1bmN0aW9uIGhleF9obWFjX21kNShrLCBkKQogIHsgcmV0dXJuIHJzdHIyaGV4KHJzdHJfaG1hY19tZDUoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSkpOyB9CmZ1bmN0aW9uIGI2NF9obWFjX21kNShrLCBkKQogIHsgcmV0dXJuIHJzdHIyYjY0KHJzdHJfaG1hY19tZDUoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSkpOyB9CmZ1bmN0aW9uIGFueV9obWFjX21kNShrLCBkLCBlKQogIHsgcmV0dXJuIHJzdHIyYW55KHJzdHJfaG1hY19tZDUoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSksIGUpOyB9CgovKgogKiBQZXJmb3JtIGEgc2ltcGxlIHNlbGYtdGVzdCB0byBzZWUgaWYgdGhlIFZNIGlzIHdvcmtpbmcKICovCmZ1bmN0aW9uIG1kNV92bV90ZXN0KCkKewogIHJldHVybiBoZXhfbWQ1KCJhYmMiKS50b0xvd2VyQ2FzZSgpID09ICI5MDAxNTA5ODNjZDI0ZmIwZDY5NjNmN2QyOGUxN2Y3MiI7Cn0KCi8qCiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGEgcmF3IHN0cmluZwogKi8KZnVuY3Rpb24gcnN0cl9tZDUocykKewogIHJldHVybiBiaW5sMnJzdHIoYmlubF9tZDUocnN0cjJiaW5sKHMpLCBzLmxlbmd0aCAqIDgpKTsKfQoKLyoKICogQ2FsY3VsYXRlIHRoZSBITUFDLU1ENSwgb2YgYSBrZXkgYW5kIHNvbWUgZGF0YSAocmF3IHN0cmluZ3MpCiAqLwpmdW5jdGlvbiByc3RyX2htYWNfbWQ1KGtleSwgZGF0YSkKewogIHZhciBia2V5ID0gcnN0cjJiaW5sKGtleSk7CiAgaWYoYmtleS5sZW5ndGggPiAxNikgYmtleSA9IGJpbmxfbWQ1KGJrZXksIGtleS5sZW5ndGggKiA4KTsKCiAgdmFyIGlwYWQgPSBBcnJheSgxNiksIG9wYWQgPSBBcnJheSgxNik7CiAgZm9yKHZhciBpID0gMDsgaSA8IDE2OyBpKyspCiAgewogICAgaXBhZFtpXSA9IGJrZXlbaV0gXiAweDM2MzYzNjM2OwogICAgb3BhZFtpXSA9IGJrZXlbaV0gXiAweDVDNUM1QzVDOwogIH0KCiAgdmFyIGhhc2ggPSBiaW5sX21kNShpcGFkLmNvbmNhdChyc3RyMmJpbmwoZGF0YSkpLCA1MTIgKyBkYXRhLmxlbmd0aCAqIDgpOwogIHJldHVybiBiaW5sMnJzdHIoYmlubF9tZDUob3BhZC5jb25jYXQoaGFzaCksIDUxMiArIDEyOCkpOwp9CgovKgogKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhIGhleCBzdHJpbmcKICovCmZ1bmN0aW9uIHJzdHIyaGV4KGlucHV0KQp7CiAgdHJ5IHsgaGV4Y2FzZSB9IGNhdGNoKGUpIHsgaGV4Y2FzZT0wOyB9CiAgdmFyIGhleF90YWIgPSBoZXhjYXNlID8gIjAxMjM0NTY3ODlBQkNERUYiIDogIjAxMjM0NTY3ODlhYmNkZWYiOwogIHZhciBvdXRwdXQgPSAiIjsKICB2YXIgeDsKICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspCiAgewogICAgeCA9IGlucHV0LmNoYXJDb2RlQXQoaSk7CiAgICBvdXRwdXQgKz0gaGV4X3RhYi5jaGFyQXQoKHggPj4+IDQpICYgMHgwRikKICAgICAgICAgICArICBoZXhfdGFiLmNoYXJBdCggeCAgICAgICAgJiAweDBGKTsKICB9CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBiYXNlLTY0IHN0cmluZwogKi8KZnVuY3Rpb24gcnN0cjJiNjQoaW5wdXQpCnsKICB0cnkgeyBiNjRwYWQgfSBjYXRjaChlKSB7IGI2NHBhZD0nJzsgfQogIHZhciB0YWIgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyI7CiAgdmFyIG91dHB1dCA9ICIiOwogIHZhciBsZW4gPSBpbnB1dC5sZW5ndGg7CiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAzKQogIHsKICAgIHZhciB0cmlwbGV0ID0gKGlucHV0LmNoYXJDb2RlQXQoaSkgPDwgMTYpCiAgICAgICAgICAgICAgICB8IChpICsgMSA8IGxlbiA/IGlucHV0LmNoYXJDb2RlQXQoaSsxKSA8PCA4IDogMCkKICAgICAgICAgICAgICAgIHwgKGkgKyAyIDwgbGVuID8gaW5wdXQuY2hhckNvZGVBdChpKzIpICAgICAgOiAwKTsKICAgIGZvcih2YXIgaiA9IDA7IGogPCA0OyBqKyspCiAgICB7CiAgICAgIGlmKGkgKiA4ICsgaiAqIDYgPiBpbnB1dC5sZW5ndGggKiA4KSBvdXRwdXQgKz0gYjY0cGFkOwogICAgICBlbHNlIG91dHB1dCArPSB0YWIuY2hhckF0KCh0cmlwbGV0ID4+PiA2KigzLWopKSAmIDB4M0YpOwogICAgfQogIH0KICByZXR1cm4gb3V0cHV0Owp9CgovKgogKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhbiBhcmJpdHJhcnkgc3RyaW5nIGVuY29kaW5nCiAqLwpmdW5jdGlvbiByc3RyMmFueShpbnB1dCwgZW5jb2RpbmcpCnsKICB2YXIgZGl2aXNvciA9IGVuY29kaW5nLmxlbmd0aDsKICB2YXIgaSwgaiwgcSwgeCwgcXVvdGllbnQ7CgogIC8qIENvbnZlcnQgdG8gYW4gYXJyYXkgb2YgMTYtYml0IGJpZy1lbmRpYW4gdmFsdWVzLCBmb3JtaW5nIHRoZSBkaXZpZGVuZCAqLwogIHZhciBkaXZpZGVuZCA9IEFycmF5KE1hdGguY2VpbChpbnB1dC5sZW5ndGggLyAyKSk7CiAgZm9yKGkgPSAwOyBpIDwgZGl2aWRlbmQubGVuZ3RoOyBpKyspCiAgewogICAgZGl2aWRlbmRbaV0gPSAoaW5wdXQuY2hhckNvZGVBdChpICogMikgPDwgOCkgfCBpbnB1dC5jaGFyQ29kZUF0KGkgKiAyICsgMSk7CiAgfQoKICAvKgogICAqIFJlcGVhdGVkbHkgcGVyZm9ybSBhIGxvbmcgZGl2aXNpb24uIFRoZSBiaW5hcnkgYXJyYXkgZm9ybXMgdGhlIGRpdmlkZW5kLAogICAqIHRoZSBsZW5ndGggb2YgdGhlIGVuY29kaW5nIGlzIHRoZSBkaXZpc29yLiBPbmNlIGNvbXB1dGVkLCB0aGUgcXVvdGllbnQKICAgKiBmb3JtcyB0aGUgZGl2aWRlbmQgZm9yIHRoZSBuZXh0IHN0ZXAuIEFsbCByZW1haW5kZXJzIGFyZSBzdG9yZWQgZm9yIGxhdGVyCiAgICogdXNlLgogICAqLwogIHZhciBmdWxsX2xlbmd0aCA9IE1hdGguY2VpbChpbnB1dC5sZW5ndGggKiA4IC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGgubG9nKGVuY29kaW5nLmxlbmd0aCkgLyBNYXRoLmxvZygyKSkpOwogIHZhciByZW1haW5kZXJzID0gQXJyYXkoZnVsbF9sZW5ndGgpOwogIGZvcihqID0gMDsgaiA8IGZ1bGxfbGVuZ3RoOyBqKyspCiAgewogICAgcXVvdGllbnQgPSBBcnJheSgpOwogICAgeCA9IDA7CiAgICBmb3IoaSA9IDA7IGkgPCBkaXZpZGVuZC5sZW5ndGg7IGkrKykKICAgIHsKICAgICAgeCA9ICh4IDw8IDE2KSArIGRpdmlkZW5kW2ldOwogICAgICBxID0gTWF0aC5mbG9vcih4IC8gZGl2aXNvcik7CiAgICAgIHggLT0gcSAqIGRpdmlzb3I7CiAgICAgIGlmKHF1b3RpZW50Lmxlbmd0aCA+IDAgfHwgcSA+IDApCiAgICAgICAgcXVvdGllbnRbcXVvdGllbnQubGVuZ3RoXSA9IHE7CiAgICB9CiAgICByZW1haW5kZXJzW2pdID0geDsKICAgIGRpdmlkZW5kID0gcXVvdGllbnQ7CiAgfQoKICAvKiBDb252ZXJ0IHRoZSByZW1haW5kZXJzIHRvIHRoZSBvdXRwdXQgc3RyaW5nICovCiAgdmFyIG91dHB1dCA9ICIiOwogIGZvcihpID0gcmVtYWluZGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkKICAgIG91dHB1dCArPSBlbmNvZGluZy5jaGFyQXQocmVtYWluZGVyc1tpXSk7CgogIHJldHVybiBvdXRwdXQ7Cn0KCi8qCiAqIEVuY29kZSBhIHN0cmluZyBhcyB1dGYtOC4KICogRm9yIGVmZmljaWVuY3ksIHRoaXMgYXNzdW1lcyB0aGUgaW5wdXQgaXMgdmFsaWQgdXRmLTE2LgogKi8KZnVuY3Rpb24gc3RyMnJzdHJfdXRmOChpbnB1dCkKewogIHZhciBvdXRwdXQgPSAiIjsKICB2YXIgaSA9IC0xOwogIHZhciB4LCB5OwoKICB3aGlsZSgrK2kgPCBpbnB1dC5sZW5ndGgpCiAgewogICAgLyogRGVjb2RlIHV0Zi0xNiBzdXJyb2dhdGUgcGFpcnMgKi8KICAgIHggPSBpbnB1dC5jaGFyQ29kZUF0KGkpOwogICAgeSA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoID8gaW5wdXQuY2hhckNvZGVBdChpICsgMSkgOiAwOwogICAgaWYoMHhEODAwIDw9IHggJiYgeCA8PSAweERCRkYgJiYgMHhEQzAwIDw9IHkgJiYgeSA8PSAweERGRkYpCiAgICB7CiAgICAgIHggPSAweDEwMDAwICsgKCh4ICYgMHgwM0ZGKSA8PCAxMCkgKyAoeSAmIDB4MDNGRik7CiAgICAgIGkrKzsKICAgIH0KCiAgICAvKiBFbmNvZGUgb3V0cHV0IGFzIHV0Zi04ICovCiAgICBpZih4IDw9IDB4N0YpCiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpOwogICAgZWxzZSBpZih4IDw9IDB4N0ZGKQogICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEMwIHwgKCh4ID4+PiA2ICkgJiAweDFGKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICggeCAgICAgICAgICYgMHgzRikpOwogICAgZWxzZSBpZih4IDw9IDB4RkZGRikKICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFMCB8ICgoeCA+Pj4gMTIpICYgMHgwRiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoKHggPj4+IDYgKSAmIDB4M0YpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCB4ICAgICAgICAgJiAweDNGKSk7CiAgICBlbHNlIGlmKHggPD0gMHgxRkZGRkYpCiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RjAgfCAoKHggPj4+IDE4KSAmIDB4MDcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCh4ID4+PiAxMikgJiAweDNGKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICgoeCA+Pj4gNiApICYgMHgzRiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoIHggICAgICAgICAmIDB4M0YpKTsKICB9CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogRW5jb2RlIGEgc3RyaW5nIGFzIHV0Zi0xNgogKi8KZnVuY3Rpb24gc3RyMnJzdHJfdXRmMTZsZShpbnB1dCkKewogIHZhciBvdXRwdXQgPSAiIjsKICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspCiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggaW5wdXQuY2hhckNvZGVBdChpKSAgICAgICAgJiAweEZGLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlucHV0LmNoYXJDb2RlQXQoaSkgPj4+IDgpICYgMHhGRik7CiAgcmV0dXJuIG91dHB1dDsKfQoKZnVuY3Rpb24gc3RyMnJzdHJfdXRmMTZiZShpbnB1dCkKewogIHZhciBvdXRwdXQgPSAiIjsKICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspCiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoaW5wdXQuY2hhckNvZGVBdChpKSA+Pj4gOCkgJiAweEZGLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNoYXJDb2RlQXQoaSkgICAgICAgICYgMHhGRik7CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcwogKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC4KICovCmZ1bmN0aW9uIHJzdHIyYmlubChpbnB1dCkKewogIHZhciBvdXRwdXQgPSBBcnJheShpbnB1dC5sZW5ndGggPj4gMik7CiAgZm9yKHZhciBpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkrKykKICAgIG91dHB1dFtpXSA9IDA7CiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDg7IGkgKz0gOCkKICAgIG91dHB1dFtpPj41XSB8PSAoaW5wdXQuY2hhckNvZGVBdChpIC8gOCkgJiAweEZGKSA8PCAoaSUzMik7CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogQ29udmVydCBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzIHRvIGEgc3RyaW5nCiAqLwpmdW5jdGlvbiBiaW5sMnJzdHIoaW5wdXQpCnsKICB2YXIgb3V0cHV0ID0gIiI7CiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDMyOyBpICs9IDgpCiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoaW5wdXRbaT4+NV0gPj4+IChpICUgMzIpKSAmIDB4RkYpOwogIHJldHVybiBvdXRwdXQ7Cn0KCi8qCiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGguCiAqLwpmdW5jdGlvbiBiaW5sX21kNSh4LCBsZW4pCnsKICAvKiBhcHBlbmQgcGFkZGluZyAqLwogIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKChsZW4pICUgMzIpOwogIHhbKCgobGVuICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IGxlbjsKCiAgdmFyIGEgPSAgMTczMjU4NDE5MzsKICB2YXIgYiA9IC0yNzE3MzM4Nzk7CiAgdmFyIGMgPSAtMTczMjU4NDE5NDsKICB2YXIgZCA9ICAyNzE3MzM4Nzg7CgogIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikKICB7CiAgICB2YXIgb2xkYSA9IGE7CiAgICB2YXIgb2xkYiA9IGI7CiAgICB2YXIgb2xkYyA9IGM7CiAgICB2YXIgb2xkZCA9IGQ7CgogICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDBdLCA3ICwgLTY4MDg3NjkzNik7CiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsgMV0sIDEyLCAtMzg5NTY0NTg2KTsKICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTcsICA2MDYxMDU4MTkpOwogICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApOwogICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDRdLCA3ICwgLTE3NjQxODg5Nyk7CiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7CiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7CiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsgN10sIDIyLCAtNDU3MDU5ODMpOwogICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDhdLCA3ICwgIDE3NzAwMzU0MTYpOwogICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpOwogICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krMTBdLCAxNywgLTQyMDYzKTsKICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTsKICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKzEyXSwgNyAsICAxODA0NjAzNjgyKTsKICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKzEzXSwgMTIsIC00MDM0MTEwMSk7CiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7CiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7CgogICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDFdLCA1ICwgLTE2NTc5NjUxMCk7CiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgNl0sIDkgLCAtMTA2OTUwMTYzMik7CiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsxMV0sIDE0LCAgNjQzNzE3NzEzKTsKICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKyAwXSwgMjAsIC0zNzM4OTczMDIpOwogICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDVdLCA1ICwgLTcwMTU1ODY5MSk7CiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsxMF0sIDkgLCAgMzgwMTYwODMpOwogICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krMTVdLCAxNCwgLTY2MDQ3ODMzNSk7CiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgNF0sIDIwLCAtNDA1NTM3ODQ4KTsKICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyA5XSwgNSAsICA1Njg0NDY0MzgpOwogICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTRdLCA5ICwgLTEwMTk4MDM2OTApOwogICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDNdLCAxNCwgLTE4NzM2Mzk2MSk7CiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgOF0sIDIwLCAgMTE2MzUzMTUwMSk7CiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsxM10sIDUgLCAtMTQ0NDY4MTQ2Nyk7CiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgMl0sIDkgLCAtNTE0MDM3ODQpOwogICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDddLCAxNCwgIDE3MzUzMjg0NzMpOwogICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krMTJdLCAyMCwgLTE5MjY2MDc3MzQpOwoKICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyA1XSwgNCAsIC0zNzg1NTgpOwogICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpOwogICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krMTFdLCAxNiwgIDE4MzkwMzA1NjIpOwogICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTRdLCAyMywgLTM1MzA5NTU2KTsKICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyAxXSwgNCAsIC0xNTMwOTkyMDYwKTsKICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyA0XSwgMTEsICAxMjcyODkzMzUzKTsKICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyA3XSwgMTYsIC0xNTU0OTc2MzIpOwogICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTBdLCAyMywgLTEwOTQ3MzA2NDApOwogICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krMTNdLCA0ICwgIDY4MTI3OTE3NCk7CiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsgMF0sIDExLCAtMzU4NTM3MjIyKTsKICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyAzXSwgMTYsIC03MjI1MjE5NzkpOwogICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krIDZdLCAyMywgIDc2MDI5MTg5KTsKICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyA5XSwgNCAsIC02NDAzNjQ0ODcpOwogICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7CiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE2LCAgNTMwNzQyNTIwKTsKICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKyAyXSwgMjMsIC05OTUzMzg2NTEpOwoKICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyAwXSwgNiAsIC0xOTg2MzA4NDQpOwogICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krIDddLCAxMCwgIDExMjY4OTE0MTUpOwogICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpOwogICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDVdLCAyMSwgLTU3NDM0MDU1KTsKICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKzEyXSwgNiAsICAxNzAwNDg1NTcxKTsKICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTsKICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTUsIC0xMDUxNTIzKTsKICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyAxXSwgMjEsIC0yMDU0OTIyNzk5KTsKICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyA4XSwgNiAsICAxODczMzEzMzU5KTsKICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7CiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7CiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7CiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDYgLCAtMTQ1NTIzMDcwKTsKICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzExXSwgMTAsIC0xMTIwMjEwMzc5KTsKICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTUsICA3MTg3ODcyNTkpOwogICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7CgogICAgYSA9IHNhZmVfYWRkKGEsIG9sZGEpOwogICAgYiA9IHNhZmVfYWRkKGIsIG9sZGIpOwogICAgYyA9IHNhZmVfYWRkKGMsIG9sZGMpOwogICAgZCA9IHNhZmVfYWRkKGQsIG9sZGQpOwogIH0KICByZXR1cm4gQXJyYXkoYSwgYiwgYywgZCk7Cn0KCi8qCiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuCiAqLwpmdW5jdGlvbiBtZDVfY21uKHEsIGEsIGIsIHgsIHMsIHQpCnsKICByZXR1cm4gc2FmZV9hZGQoYml0X3JvbChzYWZlX2FkZChzYWZlX2FkZChhLCBxKSwgc2FmZV9hZGQoeCwgdCkpLCBzKSxiKTsKfQpmdW5jdGlvbiBtZDVfZmYoYSwgYiwgYywgZCwgeCwgcywgdCkKewogIHJldHVybiBtZDVfY21uKChiICYgYykgfCAoKH5iKSAmIGQpLCBhLCBiLCB4LCBzLCB0KTsKfQpmdW5jdGlvbiBtZDVfZ2coYSwgYiwgYywgZCwgeCwgcywgdCkKewogIHJldHVybiBtZDVfY21uKChiICYgZCkgfCAoYyAmICh+ZCkpLCBhLCBiLCB4LCBzLCB0KTsKfQpmdW5jdGlvbiBtZDVfaGgoYSwgYiwgYywgZCwgeCwgcywgdCkKewogIHJldHVybiBtZDVfY21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7Cn0KZnVuY3Rpb24gbWQ1X2lpKGEsIGIsIGMsIGQsIHgsIHMsIHQpCnsKICByZXR1cm4gbWQ1X2NtbihjIF4gKGIgfCAofmQpKSwgYSwgYiwgeCwgcywgdCk7Cn0KCi8qCiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHkKICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy4KICovCmZ1bmN0aW9uIHNhZmVfYWRkKHgsIHkpCnsKICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpOwogIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTsKICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTsKfQoKLyoKICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LgogKi8KZnVuY3Rpb24gYml0X3JvbChudW0sIGNudCkKewogIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKTsKfQo=", "content_type": "application/javascript"}, "style/main.css": {"data": "LyogYWRkIHN0eWxlcyBoZXJlICovCgoqIHsKICAgIG1hcmdpbjowcHg7CiAgICBwYWRkaW5nOjBweDsKICAgIGJvcmRlcjowcDt4Cn0KCmJvZHkgewogIGZvbnQ6MWVtIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKfQoKaGVhZGVyIHsgCiAgICBkaXNwbGF5OmJsb2NrOwogICAgcG9zaXRpb246Zml4ZWQ7CiAgICB0b3A6MHB4OwogICAgd2lkdGg6MTAwJTsKICAgIGJhY2tncm91bmQ6LW1vei1saW5lYXItZ3JhZGllbnQoY2VudGVyIHRvcCAsICM0QzU4NjEsICMzODQxNDcpIAogICAgICAgcmVwZWF0IHNjcm9sbCAwIDAgdHJhbnNwYXJlbnQ7CiAgICBiYWNrZ3JvdW5kICAgICAgOiAtd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3Itc3RvcCgwJSwjNEM1ODYxKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yLXN0b3AoMTAwJSwjMzg0MTQ3KSk7CiAgICBjb2xvcjp3aGl0ZTsKICAgIHRleHQtYWxpZ246Y2VudGVyOwogICAgcGFkZGluZzoxMHB4IDBweDsKICAgIGJvcmRlci1ib3R0b206MnB4IHNvbGlkICMwMDA7CiAgICBoZWlnaHQ6MjhweDsKfQoKaGVhZGVyIGZvcm0sIGhlYWRlciBhIHsgCiAgICBjdXJzb3I6cG9pbnRlcjsKICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgdG9wOjVweDsgICAgCn0KCmhlYWRlciBhLCBoZWFkZXIgaW5wdXQgeyAKICAgIGRpc3BsYXk6YmxvY2s7CiAgICBtYXJnaW46NXB4OwogICAgYm9yZGVyLXJhZGl1czo1cHg7CiAgICAtbW96LWJvcmRlci1yYWRpdXM6NXB4OwogICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgIGNvbG9yOndoaXRlOwogICAgdGV4dC1kZWNvcmF0aW9uOm5vbmU7CiAgICBsaW5lLWhlaWdodDoyN3B4OwogICAgaGVpZ2h0OjI3cHg7CiAgICB0ZXh0LXNoYWRvdzoxcHggMXB4IDFweCAjMDAwOwogICAgYmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuMik7CiAgICBmb250LXNpemU6MTNweDsKICAgIHBhZGRpbmc6MHB4IDhweDsKfQoKLnJpZ2h0IHsKICAgIHJpZ2h0OjEwcHg7IAp9Ci5sZWZ0IHsKICAgIGxlZnQ6MTBweDsgCn0KCi5wbHVzIHsgCiAgICBmb250LXNpemU6MThweDsKICAgIHBhZGRpbmc6MHB4OwogICAgd2lkdGg6MjVweDsKfQoKaDEgeyAKICAgIGRpc3BsYXk6YmxvY2s7CiAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgIGxlZnQ6NzBweDsKICAgIHJpZ2h0OjcwcHg7CiAgICB0ZXh0LXNoYWRvdzoxcHggMXB4IDFweCAjMDAwOwogICAgZm9udC1zaXplOjI2cHg7CiAgICBmb250LXdlaWdodDpub3JtYWw7CiAgICB3aGl0ZS1zcGFjZTpub3dyYXA7CiAgICBvdmVyZmxvdzpoaWRkZW47CiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsKfQoKI25vdGVzIHsKICAgIC8qIHBhZGRpbmctdG9wOjUwcHg7ICovCiAgICBkaXNwbGF5OmJsb2NrOwogICAgcG9zaXRpb246YWJzb2x1dGU7CiAgICB0b3A6NTBweDsKICAgIGxlZnQ6MHB4OwogICAgcmlnaHQ6MHB4OwogICAgYm90dG9tOjRweDsKfQoKI25vdGVzIHRleHRhcmVhIHsKICAgIC13ZWJraXQtYXBwZWFyYW5jZTpub25lOwogICAgb3V0bGluZTpub25lOwogICAgZm9udC1mYW1pbHk6ICdSZWVuaWUgQmVhbmllJywgYXJpYWwsIHNlcmlmOwogICAgd2lkdGg6MTAwJTsKICAgIGhlaWdodDoxMDAlOwogICAgYm9yZGVyOjFweCBzb2xpZCB0cmFuc3BhcmVudDsKICAgIHBhZGRpbmc6MTBweCAwcHggMTBweCAxMHB4OwogICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApOwkKICAgIHJlc2l6ZTogbm9uZTsKfQoKLmhpZGUgewogICAgZGlzcGxheTpub25lOwp9Cgpmb290ZXIgeyAKICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgYm90dG9tOjBweDsKfQoKLm5vdGVzIGEgeyAKICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTsJCiAgICBkaXNwbGF5OmJsb2NrOwogICAgZm9udC1zaXplOjE4cHg7CiAgICBjb2xvcjojNjY2OwogICAgaGVpZ2h0OjEwMCU7CiAgICB0ZXh0LWRlY29yYXRpb246bm9uZTsKICAgIHBhZGRpbmc6MTBweCAwOwogICAgb3V0bGluZTpub25lOwp9CgoudGl0bGUgeyAKICAgIHBhZGRpbmctbGVmdDoxMHB4Owp9Cgoubm90ZXMgeyAKICAgIG1hcmdpbi10b3A6NTBweDsKICAgIHdpZHRoOjEwMCU7Cn0KCi5ub3RlcyB0ZCB7IAogICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0RERDsKfQoKLmFycm93IHsgCiAgICBmb250LXdlaWdodDpib2xkOwogICAgd2lkdGg6MzBweDsKICAgIHRleHQtYWxpZ246Y2VudGVyOwp9CgouYXJyb3cgYSB7IAogICAgZGlzcGxheTpibG9jazsKICAgIHdpZHRoOjE2cHg7CiAgICBoZWlnaHQ6MTZweDsKICAgIHBhZGRpbmc6MHB4OwogICAgbGluZS1oZWlnaHQ6MTZweDsKICAgIC1tb3otYm9yZGVyLXJhZGl1czogOHB4OwogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA4cHg7CiAgICBiYWNrZ3JvdW5kOiNEREQ7CiAgICBjb2xvcjp3aGl0ZSAhaW1wb3J0YW50OzsKICAgIG1hcmdpbjowcHggYXV0bzsKfQoKLm5vdGVzIC5kYXRlIHsKICAgIHdpZHRoOjEwMHB4OwogICAgdGV4dC1hbGlnbjpyaWdodDsKfQoubm90ZXMgLmRhdGUgYSB7IAogICAgdGV4dC1hbGlnbjpyaWdodDsKfQoubm90ZXMgLmRhdGUgYSwgLm5vdGVzIC5hcnJvdyBhIHsgCiAgICBjb2xvcjojQkJCOwogICAgZm9udC1zaXplOjEycHg7Cn0KICAgIAojZGVsZXRlIHsgCiAgICBkaXNwbGF5OmJsb2NrOwogICAgaGVpZ2h0OjQ4cHg7CiAgICB3aWR0aDo0OHB4OwogICAgYm9yZGVyOjBweDsKICAgIGJhY2tncm91bmQ6dXJsKC4uL2RlbGV0ZS5wbmcpOwogICAgdGV4dC1pbmRlbnQ6LTk5OTk7Cn0KCmlucHV0W3R5cGU9c3VibWl0XSB7CiAgICBjdXJzb3I6cG9pbnRlcjsKfQoKLm5vbmUgeyAKICAgIGZvbnQ6MjRweCBUaW1lcyBOZXcgUm9tYW4sIHNlcmlmOwogICAgZm9udC1zdHlsZTppdGFsaWM7CiAgICB0ZXh0LWFsaWduOmNlbnRlcjsKICAgIGNvbG9yOiM5OTk7CiAgICBtYXJnaW46MjBweCAwcHg7Cn0KCgpmaWVsZHNldCB7CiAgICBib3JkZXI6IDAgbm9uZTsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjREREOwogICAgb3ZlcmZsb3c6IGF1dG87CiAgICBwYWRkaW5nOiAwOwp9CgoKbGFiZWwgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBmbG9hdDogbGVmdDsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgaGVpZ2h0OiA1MHB4OwogICAgbGluZS1oZWlnaHQ6IDUwcHg7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICB3aWR0aDogMTAwJTsKfQoKbGFiZWwgc3BhbiB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGZsb2F0OiByaWdodDsKfQoKZm9ybSB7CiAgICBwYWRkaW5nOiAwIDEwcHg7Cn0KCmlucHV0W3R5cGU9InBhc3N3b3JkIl0sCmlucHV0W3R5cGU9InRleHQiXSB7IAogICAgYm9yZGVyOiAxcHggc29saWQgIzk5OTk5OTsKICAgIGZvbnQtc2l6ZTogOTAlOwogICAgcGFkZGluZzogMnB4Owp9CgppbnB1dFt0eXBlPSJzdWJtaXQiXSwgaW5wdXRbdHlwZT0iYnV0dG9uIl0sIGJ1dHRvbiB7CiAgICBwYWRkaW5nICAgICAgICAgOiA1cHggNXB4OyAKICAgIGJhY2tncm91bmQgICAgICA6IAogICAgLXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIDAlIDQwJSwgMCUgNzAlLCBmcm9tKCNGOUY5RjkpLCB0bygjRTNFM0UzKSk7CiAgICBiYWNrZ3JvdW5kICAgICAgOgogICAgLW1vei1saW5lYXItZ3JhZGllbnQoY2VudGVyIHRvcCAsICNGOUY5RjksICNFM0UzRTMpIAogICAgcmVwZWF0IHNjcm9sbCAwIDAgdHJhbnNwYXJlbnQ7CiAgICBib3JkZXIgICAgICAgICAgOiAxcHggc29saWQgIzY2NjsKICAgIGJvcmRlci1yYWRpdXMgICA6IDNweDsKICAgIHRleHQtZGVjb3JhdGlvbiA6IG5vbmU7CiAgICBjdXJzb3IgICAgICAgICAgOiBwb2ludGVyOwogICAgLW1vei1ib3JkZXItcmFkaXVzICAgIDogM3B4OwogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzIDogM3B4Owp9Cgojc3luY2J0bnMgYnV0dG9uIHsgCiAgICBkaXNwbGF5OmJsb2NrOwogICAgd2lkdGg6MTAwJTsKICAgIG1hcmdpbi10b3A6MjBweDsKICAgIGZvbnQtc2l6ZToxMDAlOwogICAgcGFkZGluZzoxMHB4Owp9CgojZmVlZGJhY2sgeyAKICAgIG1hcmdpbiA6IDIwcHg7CiAgICBiYWNrZ3JvdW5kOiAjRUVFOwogICAgcGFkZGluZzoxMnB4Owp9", "content_type": "text/css"}}, "couchapp": {"signatures": {"utils.js": "c7bfd48383701153f00d6e156b595df2", "index.html": "787859d4cc0a9b9341778d9e9d5aead8", "style/mobile.css": "8d47287daf4f69d78a8d98c348ba2523", "notes.js": "4232747d6afdb1fe95c6d1cc8bfdfaa1", "tick.png": "9c16ecd780078250afaf9069352b5a17", "mustache.js": "717514442c157cd97812ce1bf9199b3e", "delete.png": "7cd1e09fd686681bc8e2e93ae084bb82", "md5.js": "1696a43fdca03c6bc49d5a000fbf4b65", "style/main.css": "33d18fe68aa9138fe661fc906498f1cf"}, "objects": {}, "manifest": ["views/", "views/notes/", "views/notes/map.js"]}, "views": {"notes": {"map": "function(doc) {\n  if (doc.type && doc.type === 'note') {\n    emit([doc.created, doc.title], null);\n  }\n};"}}}
